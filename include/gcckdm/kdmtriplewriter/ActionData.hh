//
// Copyright (c) 2010 KDM Analytics, Inc. All rights reserved.
// Created on: Aug 25, 2010
// Author: Kyle Girard <kyle@kdmanalytics.com>
//
// This file is part of libGccKdm.
//
// Foobar is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// libGccKdm is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with libGccKdm.  If not, see <http://www.gnu.org/licenses/>.


#ifndef GCCKDM_KDMTRIPLEWRITER_ACTIONDATA_HH_
#define GCCKDM_KDMTRIPLEWRITER_ACTIONDATA_HH_

/**
 * Contains data needed to write KDM action elements and their relationships.
 *
 * An ActionData object has a few properties and actionId, startActionId, outputId
 * and if it is a goto action or not.  It's purpose is to contain information
 * about and KDM ActionElement so it can be used in multiple places.
 *
 * The actionId is subject id of the KDM element being represented ie. Assign,
 * PtrSelect etc.  If this object is just a reference to a storableunit this
 * object will not have an actionId
 *
 * The GIMPLE generated by gcc doesn't map directly to KDM
 * in some cases we have to split each GIMPLE statement in to many KDM statements
 * these are what we call complex or compound action elements.  In order to
 * have correct KDM flows we need to process these compound action actions
 * before we write the original KDM element.  The startActionId is actionId of
 * the very first of these broken down action statements.   If the GIMPLE
 * statement can be mapped to KDM the startActionId will be equal to InvalidId
 * or equal to the actionId
 *
 * The outputId is the ID of storableUnit.  In some cases an GIMPLE statement
 * is not a complex or compound element and can be mapped to a KDM element which
 * writes to a storableUnit.  In that case all we need to keep track of for
 * KDM relationships is the id of the storableUnit that was written to.
 *
 * gotoAction in order to determine proper flows between elements it's important
 * to know if the actionElement represented by actionId is a goto KDM element
 * or not.  If this flag is true it's assumed that the action represented by
 * actionId is a goto KDM element
 *
 */
class ActionData
{
public:
  /**
   * Represents an invalid or unset value for all action elements and ids
   */
  static const long InvalidId = -1;

  /**
   * Constructs an ActionData element with all values set to InvalidId or false
   *
   * Using this constructor creates and ActionData object that is useless unless
   * mutators are use to set the individual properties.
   */
  ActionData() :
    mActionId(InvalidId),
    mStartActionId(InvalidId),
    mOutputId(InvalidId),
    mGotoAction(false)
  {}

  /**
   *  Creates an ActionData object setting the actionid, startActionId to the given id.
   *  The outputId is set to InvalidId and it's assumed this isn't a gotoAction
   *  the
   *
   */
  ActionData(long actId) :
    mActionId(actId),
    mStartActionId(actId),
    mOutputId(InvalidId),
    mGotoAction(false),
    mReturnAction(false)
  {}

  /**
   * The subject id of the action element this actionData represents
   *
   * @return the subject id of the action element being
   */
  long actionId() const { return mActionId; }

  /**
   * Sets the action id to the given value.  Note: users should probably also set the
   * startActionId if they use this method
   *
   * @param id of the KDM action element being tracked
   */
  void actionId(long id) { mActionId = id; }

  /**
   * Returns true if this ActionData represents a goto KDM element
   */
  bool isGotoAction() const { return mGotoAction; }

  /**
   * Determines if this ActionData represents a Goto KDM element, if the given value is
   * true it's assumed that the KDM element id returned by actionId() is a GoTo kdm element
   *
   * @param gotoAction if true the element represented by this actionData object is assumed
   * to be a Goto element
   */
  void gotoAction(bool gotoAction)
  {
    mGotoAction = gotoAction;
  }


  bool isReturnAction() const
  {
    return mReturnAction;
  }

  void returnAction(bool flag)
  {
    mReturnAction = flag;
  }

  /**
   * Returns the start action id if explicity set otherwise returns the actionid
   */
  long startActionId() const
  {
    return (mStartActionId == InvalidId) ? mActionId : mStartActionId;
  }

  /**
   * Sets the startActionId to the given id.
   *
   * @param id the KDM element id of the start of this elements flow
   */
  void startActionId(long id ) { mStartActionId = id; }

  /**
   * Uses the given data object to determine if the startActionId.  If the
   * given object has an actionId and isn't just an outputId the startActionId
   * of this actionData is set to the given ActionData's actionId
   *
   * @param data the action id to use to set this startActionId
   */
  void startActionId(ActionData const & data)
  {
    if (data.hasActionId())
    {
      mStartActionId = data.mStartActionId;
    }
  }

  /**
   * Returns true if this ActionData elements startActionId is not equal to InvalidId
   *
   * @return true if the startActionId does not equal InvalidId
   */
  bool hasStartAction() const
  {
    return mStartActionId != InvalidId;
  }

  /**
   * Returns true if the startActionId is different from the actionId
   * and actionId and mStartActionId are both not equal to InvalidId
   *
   * @return true or false
   */
  bool hasFlow() const
  {
    return (mActionId != InvalidId) && (mStartActionId != InvalidId) && mActionId != mStartActionId;
  }


  /**
   * Returns the output id for this ActionData.  If this ActionData doesn't have an outputId
   * it returns InvalidId
   *
   * @return the id of the a storeable unit or InvalidId if there is not output id
   */
  long outputId() const { return mOutputId; }

  /**
   *  Set the outputId of this ActionData to the given id.
   *
   *  @param id the id of the storableunit representing this actionData
   */
  void outputId(long id) { mOutputId = id; }

  /**
   *
   */
  bool hasActionId() const { return mActionId != InvalidId; }

private:
  long mActionId;
  long mStartActionId;
  long mOutputId;
  bool mGotoAction;
  bool mReturnAction;
};

#endif /* GCCKDM_KDMTRIPLEWRITER_ACTIONDATA_HH_ */
